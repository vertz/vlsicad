#HERE IS YOUR PARTIAL SCRIPT FOR PROGRAM 2 PART 2
#
# input variables – do NOT change this
boolean a b c d e f g h pri_in pri_N S2 S1 S0
#
# Here is the the correct logic function Y
eval Y a&c&!e&g&h + a&b&!h + d&e&!f&!g + !b&!c&d&e + a&!e&h + !c&!g
#
# YOU DO THIS:  Define one programmable inverter block  [8 points]
#               (Signal input = pri_in   Output = PRI
#                Inversion control signal = pri_N)
eval PRI pri_N^pri_in
#
# YOU DO THIS:  Define Selection Logic [8 points]
#              (3 select inputs, 8 PRI control outputs Ni)
eval N0 !S2&!S1&!S0
eval N1 !S2&!S1&S0
eval N2 !S2&S1&!S0
eval N3 !S2&S1&S0
eval N4 S2&!S1&!S0
eval N5 S2&!S1&S0
eval N6 S2&S1&!S0
eval N7 S2&S1&S0

# YOU DO THIS:  Build a correct implementation of the Y network
#               with 8 programmable inverters (PRIs) embedded in it.
#               Call it Y_repair.
#Hint:  Build this one one gate at a time from the diagram.
#       16 gates → 16 lines of Evals.
#       Embed each PRI in equation for gate output it inverts.
#
eval t1 !b&!c
eval w0 N0^(!f&!g)
eval t2 !e
eval w1 N1^(!h)
eval w2 N2^(!c&!g)
eval w3 N3^(t1+w0)
eval t3 h&t2
eval t4 b&w1
eval w4 N4^(t3+t4)
eval t5 d&w3
eval t6 !w4
eval w5 N5^(e&t5)
eval w6 N6^(a&t6)
eval t7 !w2&!w6
eval w7 N7^(!t7)
eval Y_repair w5+w7
#
#  Do EXNOR of the correct Y function and your Y_repair   [16 points]
eval Z !(Y ^ Y_repair)
#
# YOU DO THIS: what is the right quantification to solve for repair?
quantify u Z_quantify Z a b c d e f g h
#
# what values of Si's make this function == 1?
satisfy Z_quantify
#  You look at this result, and tell us how to repair network!
#
